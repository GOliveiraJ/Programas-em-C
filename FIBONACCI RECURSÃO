#include <stdio.h>
#include <time.h>

// Função recursiva para calcular o Fibonacci
unsigned long long fibonacciRecursivo(int n) {
    if (n <= 1)
        return n;
    else
        return fibonacciRecursivo(n - 1) + fibonacciRecursivo(n - 2);
}

// Função iterativa para calcular o Fibonacci
unsigned long long fibonacciIterativo(int n) {
    if (n <= 1)
        return n;

    unsigned long long anterior = 0, atual = 1, proximo;
    for (int i = 2; i <= n; i++) {
        proximo = anterior + atual;
        anterior = atual;
        atual = proximo;
    }

    return atual;
}

int main() {
    int n = 100; // número para calcular o Fibonacci
    clock_t inicio, fim;
    double tempoGasto;

    printf("=== Programa para calcular Fibonacci ===\n\n");

    // Cálculo com a função iterativa
    printf("Calculando Fibonacci de %d (forma iterativa)...\n", n);
    inicio = clock();
    unsigned long long resultadoIterativo = fibonacciIterativo(n);
    fim = clock();
    tempoGasto = (double)(fim - inicio) / CLOCKS_PER_SEC;
    printf("Resultado (iterativo): %llu\n", resultadoIterativo);
    printf("Tempo gasto (iterativo): %.6f segundos\n\n", tempoGasto);

    // Cálculo com a função recursiva
    n = 40; // valor reduzido para não demorar muito
    printf("Calculando Fibonacci de %d (forma recursiva)...\n", n);
    inicio = clock();
    unsigned long long resultadoRecursivo = fibonacciRecursivo(n);
    fim = clock();
    tempoGasto = (double)(fim - inicio) / CLOCKS_PER_SEC;
    printf("Resultado (recursivo): %llu\n", resultadoRecursivo);
    printf("Tempo gasto (recursivo): %.6f segundos\n", tempoGasto);

    return 0;
}
